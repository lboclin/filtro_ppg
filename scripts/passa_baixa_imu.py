# -*- coding: utf-8 -*-
"""
Script de Pr√©-processamento para Sinais de IMU (Aceler√¥metro).

Este script carrega os dados brutos de 3 eixos do aceler√¥metro, aplica um
filtro passa-baixa suave para remover ru√≠do de alta frequ√™ncia do sensor
(jitter), e salva os dados suavizados em um novo diret√≥rio para uso posterior.
"""

import os
import numpy as np
from scipy.signal import butter, filtfilt

# --- 1. Configura√ß√µes ---

# Diret√≥rio onde os dados brutos do IMU (.npy) est√£o localizados.
INPUT_IMU_DIR = "data/dataset_physionet/pre_filtered_imu/"
# Diret√≥rio onde os dados do IMU j√° filtrados (suavizados) ser√£o salvos.
PROCESSED_IMU_DIR = "data/dataset_physionet/filtered_1_imu/"

# --- Par√¢metros do Filtro Passa-Baixa ---
# A frequ√™ncia de amostragem dos sinais √© de 500 Hz.
FS = 500.0
# Frequ√™ncia de corte para o filtro passa-baixas (em Hz).
# Um valor como 20Hz √© alto o suficiente para n√£o afetar os sinais de movimento
# reais (caminhada, corrida), mas baixo o suficiente para remover ru√≠do eletr√¥nico.
LOWPASS_CUTOFF = 20.0
# Ordem do filtro: define qu√£o "√≠ngreme" √© a atenua√ß√£o ap√≥s a frequ√™ncia de corte.
FILTER_ORDER = 4

def filter_imu_data(raw_imu_data, fs):
    """
    Aplica um filtro passa-baixa Butterworth de fase zero em cada eixo dos dados do IMU.

    Args:
        raw_imu_data (np.array): Array 2D com os dados do IMU (n_amostras, 3 eixos).
        fs (float): A frequ√™ncia de amostragem do sinal.

    Returns:
        np.array: O array 2D com os dados do IMU filtrados.
    """
    # Projeta o filtro passa-baixa Butterworth, obtendo seus coeficientes (b, a).
    # Normaliza a frequ√™ncia de corte pela frequ√™ncia de Nyquist.
    nyquist_freq = 0.5 * fs
    low_cutoff_norm = LOWPASS_CUTOFF / nyquist_freq
    b, a = butter(FILTER_ORDER, low_cutoff_norm, btype='lowpass', analog=False)
    
    # Aplica o filtro aos dados. 'filtfilt' √© usado para evitar atraso de fase no sinal.
    # O par√¢metro 'axis=0' √© crucial: ele garante que o filtro seja aplicado
    # verticalmente, ao longo do tempo, para cada eixo (coluna) de forma independente.
    filtered_imu_data = filtfilt(b, a, raw_imu_data, axis=0)
    
    return filtered_imu_data

# --- 2. Execu√ß√£o Principal ---
if __name__ == "__main__":
    # Garante que o diret√≥rio de sa√≠da exista.
    os.makedirs(PROCESSED_IMU_DIR, exist_ok=True)
    print(f"Diret√≥rio de sa√≠da para IMU processado: {os.path.abspath(PROCESSED_IMU_DIR)}")

    # Verifica se o diret√≥rio de entrada existe.
    if not os.path.isdir(INPUT_IMU_DIR):
        print(f"üö® ERRO: Diret√≥rio de entrada n√£o encontrado: {os.path.abspath(INPUT_IMU_DIR)}")
        exit()

    # Encontra todos os arquivos de IMU no diret√≥rio de entrada.
    imu_files = sorted([f for f in os.listdir(INPUT_IMU_DIR) if f.endswith("_imu.npy")])
    
    if not imu_files:
        print(f"Nenhum arquivo _imu.npy encontrado em {os.path.abspath(INPUT_IMU_DIR)}")
        exit()

    print(f"\nEncontrados {len(imu_files)} arquivos IMU para filtrar.")

    # Itera sobre cada arquivo de IMU encontrado.
    for filename in imu_files:
        print(f"\nProcessando arquivo: {filename}...")
        
        input_path = os.path.join(INPUT_IMU_DIR, filename)
        
        # Carrega os dados brutos do IMU (um array com 3 colunas/eixos).
        raw_imu = np.load(input_path)
        
        # Chama a fun√ß√£o para aplicar o filtro passa-baixa.
        filtered_imu = filter_imu_data(raw_imu, FS)
        
        # Salva o novo array com os dados filtrados no diret√≥rio de sa√≠da.
        output_path = os.path.join(PROCESSED_IMU_DIR, filename)
        np.save(output_path, filtered_imu)
        print(f"  ‚úÖ Sinal IMU filtrado salvo em: {output_path}")

    print("\n--- Filtragem do IMU Conclu√≠da ---")